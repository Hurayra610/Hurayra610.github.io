# GitHub Commands Guide

Welcome to the GitHub Commands Guide! This repository contains a collection of useful GitHub commands along with explanations to help you manage repositories and collaborate with others more efficiently.

## Table of Contents

- [Basic GitHub Commands](#basic-github-commands)
- [GitHub Repository Management](#github-repository-management)
- [Branching and Merging](#branching-and-merging)
- [Collaboration and Pull Requests](#collaboration-and-pull-requests)

## Basic GitHub Commands

### `git clone`

Clones an existing repository to your local machine.

```bash
git clone https://github.com/username/repository.git
```

Git Command Guide
This README provides a list of essential Git commands along with descriptions of what they do. Git is a powerful version control system that helps developers collaborate, track changes, and manage project history efficiently.

Table of Contents
Setup
Basic Git Workflow
Branching and Merging
Stashing
Remote Repositories
Tagging
Advanced Commands
Troubleshooting
Resources
Setup

1. git init
   Initialize a new Git repository in the current directory.
   bash
   Copy code
   git init
2. git config
   Set user configuration options like username and email.
   bash
   Copy code
   git config --global user.name "Your Name"
   git config --global user.email "your.email@example.com"
3. git clone
   Clone a remote repository to your local machine.
   bash
   Copy code
   git clone <repository_url>
   Basic Git Workflow
4. git status
   Check the status of your working directory and staging area.
   bash
   Copy code
   git status
5. git add
   Add changes from the working directory to the staging area.
   bash
   Copy code
   git add <file>
   git add . # Add all changes
6. git commit
   Commit staged changes to the repository with a message.
   bash
   Copy code
   git commit -m "Commit message"
7. git log
   Show commit history.
   bash
   Copy code
   git log
8. git diff
   Show changes between commits, working directory, and staging area.
   bash
   Copy code
   git diff
   Branching and Merging
9. git branch
   List, create, or delete branches.
   bash
   Copy code
   git branch # List all branches
   git branch <branch_name> # Create a new branch
   git branch -d <branch_name> # Delete a branch
10. git checkout
    Switch to another branch or commit.
    bash
    Copy code
    git checkout <branch_name>
    git checkout -b <new_branch_name> # Create and switch to a new branch
11. git merge
    Merge the specified branch into the current branch.
    bash
    Copy code
    git merge <branch_name>
    Stashing
12. git stash
    Temporarily save changes without committing them.
    bash
    Copy code
    git stash
    git stash pop # Apply the latest stash
    git stash list # List all stashes
    Remote Repositories
13. git remote
    Manage remote repository connections.
    bash
    Copy code
    git remote add <name> <url> # Add a new remote
    git remote -v # List all remotes
    git remote remove <name> # Remove a remote
14. git push
    Push commits to a remote repository.
    bash
    Copy code
    git push <remote> <branch>
    git push -u origin <branch> # Set up tracking and push
15. git pull
    Fetch and merge changes from a remote repository.
    bash
    Copy code
    git pull <remote> <branch>
16. git fetch
    Download commits and files from a remote repository without merging.
    bash
    Copy code
    git fetch <remote>
    Tagging
17. git tag
    Create, list, or delete tags.
    bash
    Copy code
    git tag # List tags
    git tag <tag_name> # Create a new tag
    git tag -d <tag_name> # Delete a tag
    git push origin <tag_name> # Push a tag to a remote
    Advanced Commands
18. git rebase
    Reapply commits on top of another base commit.
    bash
    Copy code
    git rebase <branch>
19. git reset
    Unstage or discard changes.
    bash
    Copy code
    git reset <file> # Unstage file
    git reset --hard # Discard all changes in working directory
20. git revert
    Create a new commit that undoes changes from a previous commit.
    bash
    Copy code
    git revert <commit_id>
    Troubleshooting
21. git clean
    Remove untracked files from the working directory.
    bash
    Copy code
    git clean -f # Remove untracked files
    git clean -fd # Remove untracked files and directories
22. git cherry-pick
    Apply specific commits from one branch into another.
    bash
    Copy code
    git cherry-pick <commit_id>
23. git archive
    Create an archive of files from a repository.
    bash
    Copy code
    git archive --format=zip HEAD > archive.zip
24. git blame
    Show what revision and author last modified each line of a file.
    bash
    Copy code
    git blame <file>
25. git bisect
    Use binary search to find the commit that introduced a bug.
    bash
    Copy code
    git bisect start
    git bisect bad # Mark the current commit as bad
    git bisect good <commit> # Mark a known good commit
    Resources
    For more information, visit the official Git documentation.
